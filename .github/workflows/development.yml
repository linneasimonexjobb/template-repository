---
name: development-template

on:
  push:
    branches-ignore:
      - main        # Use branches instead of pushing directly to main
    paths-ignore:
      - 'docs/**'   # Docs is running its own workflow

permissions:
  contents: read # The workflow is read only

# Ensures that only one workflow per branch/environment will be run
concurrency:
  group: ${{ github.head_ref || github.ref_name }} 
  cancel-in-progress: true

jobs:      
  run_project:
    runs-on: ubuntu-22.04   # Change to linux, macos or windows. To run multiple os:es, see https://docs.github.com/en/actions/using-jobs/using-a-matrix-for-your-jobs
    timeout-minutes: 10 # job times out after 10 mins

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Define what language, versions etc here. Sometimes you may not need it
      - name: Setup x
        run: echo "set up project here" 

      # Cache dependencies for faster workflow, see https://docs.github.com/en/actions/using-workflows/caching-dependencies-to-speed-up-workflows
      - name: Cache dependencies
        uses: actions/cache@v3

      - name: Install dependencies
        run: echo "install dependencies"

      # Define how the lint will be run
      - name: Linting
        run: echo "run lint" 

      # Change this to your build command
      - name: Build
        run: echo "build project" 

      # change this to your test command, you may need to run multiple tests here, such as unit, e2e, integration etc.
      - name: Run Tests
        run: echo "run tests" 

      # most tests frameworks can generate a json or txt file which data such as total lines/functions/etc covererd.
      - name: Retrieve unit test coverage
        run: |
          echo "generate test files" 
          COVERAGE_VAR=$(jq -r '.your.json.file.format' < testfile.json) # IF json file, change your.json.file to the correct query and testfile to correct file
          if [[ $COVERAGE_VAR -lt 80 ]]; then  # Adjust threshold as needed
            echo "::warning::Coverage below threshold (${COVERAGE_VAR}). \
            Please improve test coverage." >> $GITHUB_STEP_SUMMARY 
          else
            echo "$COVERAGE_VAR % line coverage"
          fi